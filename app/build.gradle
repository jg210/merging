plugins {
    id 'com.android.application'
    id 'com.google.android.gms.oss-licenses-plugin'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

static String getBranchName() {
    final branchCommand = ["git", "symbolic-ref", "HEAD", "--short"]
    return branchCommand.execute().text.trim()
}

static boolean isVersioned() {
    return getBranchName() == "release"
}

/**
 * The android "version code", from the highest-number changelog file.
 */
static int findVersionCode() {
    final int versionCode
    if (isVersioned()) {
        def versionNameScript = new File("bin/versionNumber")
        final stdout = [versionNameScript].execute().text.trim()
        versionCode = Integer.parseInt(stdout)
    } else {
        versionCode = 1
    }
    return versionCode
}

/**
 * The android "version name".
 */
static String findVersionName() {
    if (!isVersioned()) {
        return "0.0.1"
    }
    return "0.0.${findVersionCode()}"
}

def releaseStoreFile = file(RELEASE_STORE_FILE, PathValidation.NONE)

android {
    compileSdk 34
    defaultConfig {
        applicationId "uk.me.jeremygreen.merging"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode findVersionCode()
        versionName findVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        viewBinding = true
        buildConfig = true
    }
    signingConfigs {
        release {
            storeFile releaseStoreFile
            storePassword file(RELEASE_STORE_PASSWORD_FILE).getText('UTF-8').trim()
            keyPassword file(RELEASE_KEY_PASSWORD_FILE).getText('UTF-8').trim()
            keyAlias RELEASE_KEY_ALIAS
        }
    }
    buildTypes {
        release {
            if (releaseStoreFile.exists() && releaseStoreFile.size() > 0) {
                signingConfig signingConfigs.release
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    flavorDimensions "flavour"
    productFlavors {
        develop {
            dimension "flavour"
            applicationId "uk.me.jeremygreen.merging.develop"
        }
        product {
            dimension "flavour"
        }
    }
    namespace 'uk.me.jeremygreen.merging'
}

dependencies {
    def lifecycle_version = "2.6.2"
    def room_version = "2.6.1"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1"
    implementation 'androidx.annotation:annotation:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${lifecycle_version}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${lifecycle_version}"
    implementation "androidx.room:room-ktx:${room_version}"
    implementation "androidx.room:room-runtime:${room_version}"
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'com.facebook.fresco:fresco:1.13.0'
    implementation platform('com.google.firebase:firebase-bom:29.0.4')
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.android.gms:play-services-mlkit-face-detection:16.1.4'
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'
    implementation 'com.google.android.material:material:1.10.0'
    kapt "androidx.room:room-compiler:${room_version}"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "androidx.room:room-testing:${room_version}"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

task writeVersionFile {
    doLast {
        def versionFile = file("${buildDir}/version")
        versionFile.parentFile.mkdirs()
        versionFile.write(findVersionName(), "UTF-8")
    }
}

preBuild.dependsOn(writeVersionFile)