plugins {
    id 'com.android.application'
    id 'com.google.android.gms.oss-licenses-plugin'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'org.jetbrains.kotlin.kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

static String getBranchName() {
    final branchCommand = ["git", "symbolic-ref", "HEAD", "--short"]
    return branchCommand.execute().text.trim()
}

static boolean isVersioned() {
    return getBranchName() == "release"
}

/**
 * The android "version code", from the highest-number changelog file.
 */
int getVersionCode() {
    if (isVersioned()) {
        def changelogsDir = new File(rootDir, "fastlane/metadata/android/en-GB/changelogs")
        final command = "find ${changelogsDir} -name '*.txt' -name '*.txt' -exec basename '{}' ';' | sed 's/[.]txt\$//' | sort -n | tail -n1"
        final stdout = command.execute().text.trim()
        return Integer.parseInt(stdout)
    } else {
        return 1
    }
}

/**
 * The android "version name".
 */
static String getVersionName() {
    if (!isVersioned()) {
        return "0.0.1"
    }
    return "0.0.${getVersionCode()}"
}

def releaseStoreFile = file(RELEASE_STORE_FILE, PathValidation.NONE)

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "uk.me.jeremygreen.merging"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode getVersionCode()
        versionName getVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile releaseStoreFile
            storePassword file(RELEASE_STORE_PASSWORD_FILE).getText('UTF-8').trim()
            keyPassword file(RELEASE_KEY_PASSWORD_FILE).getText('UTF-8').trim()
            keyAlias RELEASE_KEY_ALIAS
        }
    }
    buildTypes {
        release {
            if (releaseStoreFile.exists() && releaseStoreFile.size() > 0) {
                signingConfig signingConfigs.release
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    flavorDimensions "flavour"
    productFlavors {
        develop {
            dimension "flavour"
            applicationId "uk.me.jeremygreen.merging.develop"
        }
        product {
            dimension "flavour"
        }
    }
}

dependencies {
    def lifecycle_version = "2.2.0"
    def room_version = "2.2.5"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.5"
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${lifecycle_version}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${lifecycle_version}"
    implementation "androidx.room:room-ktx:${room_version}"
    implementation "androidx.room:room-runtime:${room_version}"
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.2.1'
    implementation 'com.facebook.fresco:fresco:1.13.0'
    implementation 'com.google.firebase:firebase-analytics:17.5.0'
    implementation 'com.google.android.gms:play-services-mlkit-face-detection:16.1.1'
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'
    implementation 'com.google.android.material:material:1.1.0'
    kapt "androidx.room:room-compiler:${room_version}"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "androidx.room:room-testing:${room_version}"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

task writeVersionFile {
    doLast {
        file("${buildDir}/version").write(getVersionName(), "UTF-8")
    }
}

preBuild.dependsOn(writeVersionFile)