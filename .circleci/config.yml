version: 2
jobs:
  build:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
      ORG_GRADLE_PROJECT_RELEASE_STORE_FILE: /home/circleci/code/release.keystore
      ORG_GRADLE_PROJECT_RELEASE_STORE_PASSWORD_FILE: /home/circleci/code/release.password
      ORG_GRADLE_PROJECT_RELEASE_KEY_PASSWORD_FILE: /home/circleci/code/release.password
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}-{{ checksum "gradle.properties" }}
      - run:
          name: Create google-services.json (product flavour)
          command: rm -f app/src/product/google-services.json && printf "%s" "${GOOGLE_SERVICES}" | base64 --decode > app/src/product/google-services.json
      - run:
          name: Create google-services.json (develop flavour)
          command: rm -f app/src/develop/google-services.json && printf "%s" "${GOOGLE_SERVICES_DEVELOP}" | base64 --decode > app/src/develop/google-services.json
      - run:
          name: Create release.password
          command: printf "%s\n" "${RELEASE_KEY_PASSWORD:-}" > "${ORG_GRADLE_PROJECT_RELEASE_KEY_PASSWORD_FILE}"
      - run:
          name: Create release.keystore
          command: printf "%s" "${RELEASE_KEYSTORE:-}" | base64 --decode > "${ORG_GRADLE_PROJECT_RELEASE_STORE_FILE}"
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}-{{ checksum "gradle.properties" }}
      - run:
          name: Run Tests
          command: ./gradlew lint test assembleProduct
      - store_artifacts: # https://circleci.com/docs/2.0/artifacts/
          path: app/build/outputs/apk/product/release/app-product-release.apk
          destination: apks/app-product-release.apk
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_test_results: # https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/test-results
      - persist_to_workspace:
          root: app/build
          paths:
            - version
            - outputs
  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=$(cat ./artifacts/version)
            ghr -t "${GITHUB_TOKEN}"  -u "${CIRCLE_PROJECT_USERNAME}" -r "${CIRCLE_PROJECT_REPONAME}" -c "${CIRCLE_SHA1}" "v${VERSION}" ./artifacts/outputs/apk/product/release/app-product-release.apk
  publish-play-store:
    docker:
      - image: circleci/ruby:2.7.1
    steps:
      - checkout
      - run:
          command: |
            env | sort
      - restore_cache:
          key: rbenv-{{ checksum "Gemfile.lock" }}-{{ checksum "Gemfile" }}-{{ checksum ".ruby-version" }}
      - run:
          name: Run setup script
          command: bin/setup
      - save_cache:
          paths:
            - ~/.rbenv
          key: rbenv-{{ checksum "Gemfile.lock" }}-{{ checksum "Gemfile" }}-{{ checksum ".ruby-version" }}
      - attach_workspace:
          at: ./artifacts
      - run:
          name: Create google-play-service.json
          command: printf "%s" "${GOOGLE_PLAY_SERVICE_JSON}" | base64 --decode > google-play-service.json
      - run:
          name: "Publish Release to Google Play Store"
          command: |
            bin/fastlane supply --track beta --apk ./artifacts/outputs/apk/product/release/app-product-release.apk

workflows:
  version: 2
  all:
    jobs:
      - build
      - publish-github-release:
          requires:
            - build
          filters:
            branches:
              only: master
      - publish-play-store:
          requires:
            - build
          filters:
            branches:
              only: master

